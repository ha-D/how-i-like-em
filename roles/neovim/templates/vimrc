call plug#begin()

Plug 'scrooloose/nerdtree'
Plug 'fatih/vim-go'
Plug 'sebdah/vim-delve'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'dyng/ctrlsf.vim'
Plug 'tpope/vim-commentary'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'APZelos/blamer.nvim'
Plug 'psliwka/vim-smoothie'
Plug 'sheerun/vim-polyglot'
Plug 'scrooloose/syntastic'
Plug 'puremourning/vimspector'

Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
" Should be last
Plug 'ryanoasis/vim-devicons'
call plug#end()

" -------------------------------------------------------------------------------------------------
" Basics
" -------------------------------------------------------------------------------------------------
let mapleader = ";"

set mouse=a
set belloff=all
set encoding=utf8

set autoindent
set smartindent
set shiftwidth=4
set smarttab
set clipboard=unnamed

set number
set relativenumber

set incsearch
set ignorecase
set smartcase

set noswapfile
set autoread
autocmd BufWritePre * %s/\s\+$//e "Auto remove trailing whitespace

set formatoptions-=cro " dont add comment on newline

" -------------------------------------------------------------------------------------------------
" Hotkeys
" -------------------------------------------------------------------------------------------------
:nmap <leader>s :split<Cr>
:nmap <leader>v :vsplit<Cr>

" -------------------------------------------------------------------------------------------------
" Coc
" -------------------------------------------------------------------------------------------------
" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

let g:coc_global_extensions = [
	\ 'coc-pairs',
	\ 'coc-python',
	\ 'coc-json',
	\ 'coc-html',
	\ 'coc-css',
	\ 'coc-prettier'
	\]

" -------------------------------------------------------------------------------------------------
" Status stuff
" -------------------------------------------------------------------------------------------------
" enable tagbar for go
let g:tagbar_type_go = {
    \ 'ctagstype': 'go',
    \ 'kinds' : [
        \'p:package',
        \'f:function',
        \'v:variables',
        \'t:type',
        \'c:const'
    \]
\}

" Fixes some error with airline and tagbar
let g:airline#extensions#tagbar#enabled = 0

" -------------------------------------------------------------------------------------------------
" Theme
" -------------------------------------------------------------------------------------------------
" OneDark Theme
if (has("nvim"))
   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
   set termguicolors
endif
syntax on
silent! colorscheme gruvbox
let g:airline_theme='gruvbox'
set bg:dark

"silent! colorscheme onedark
"let g:airline_theme='onedark'


" -------------------------------------------------------------------------------------------------
" NERDTree
" -------------------------------------------------------------------------------------------------
nnoremap <silent> <expr> <C-g> g:NERDTree.IsOpen() ? "\:NERDTreeClose<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTree<CR>"
:nnoremap <C-2> 2gt
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

nnoremap <silent> <C-l> :TagbarToggle <CR>


" -------------------------------------------------------------------------------------------------
" Search
" -------------------------------------------------------------------------------------------------
nmap     <leader>f <Plug>CtrlSFPrompt
vmap     <leader>f <Plug>CtrlSFVwordPath
vmap     <leader>F <Plug>CtrlSFVwordExec
nmap     <leader>n <Plug>CtrlSFCwordPath
nmap     <leader>p <Plug>CtrlSFPwordPath
nnoremap <leader>o :CtrlSFOpen<CR>
nnoremap <leader>t :CtrlSFToggle<CR>
inoremap <leader>t <Esc>:CtrlSFToggle<CR>


" -------------------------------------------------------------------------------------------------
" VimSpector
" -------------------------------------------------------------------------------------------------
let g:vimspector_enable_mappings = "HUMAN"

